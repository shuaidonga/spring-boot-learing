mvn install:install-file -Dfile=H:\patchca-YP-1.0.0.jar -DgroupId=net.pusuo -DartifactId=patchca -Dversion=YP-1.0.0 -Dpackaging=jar

全局配置
--spring.profiles.active=dev --server.port=8090 --spring.jpa.hibernate.ddl-auto=none --spring.datasource.port=3306 --spring.datasource.username=root --spring.datasource.password=root

<!-- 包含支持UI模版（Velocity，FreeMarker，JasperReports）， 邮件服务， 脚本服务(JRuby)， 缓存Cache（EHCache）， 
		任务计划Scheduling（uartz）。 -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context-support</artifactId>
	</dependency>

	<!-- 热部署 -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<optional>true</optional>
	</dependency>
	<!-- spring boot web支持：mvc,aop... -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>
	<plugins>
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<configuration>
				<!--fork : 如果没有该项配置，肯呢个devtools不会起作用-->
				<fork>true</fork>
			</configuration>
		</plugin>
	</plugins>

*****************************************************************************************************************************

Hibernate的访问类型为field时，在字段上进行注解声；
访问类型为property时，在getter方法上进行注释声明。

@Table(name="",catalog="",schema="")  - 可选，通常和@Entity 配合使用
@Id     映射生成主键
@Version    定义乐观锁

@Column     映射表的列
name - 可选，表示数据库表中该字段的名称，默认情形属性名称一致
nullable - 可选，表示该字段是否允许为 null，默认为 true
unique - 可选，表示该字段是否是唯一标识，默认为 false
length - 可选，表示该字段的大小，仅对 String 类型的字段有效，默认值255.
insertable - 可选，表示在ORM框架执行插入操作时，该字段是否应出现INSETRT语句中，默认为 true
updateable - 可选，表示在ORM 框架执行更新操作时，该字段是否应该出现在UPDATE 语句中，默认为 true. 对于一经创建就不可以更改的字段，该属性非常有用，如对于 birthday 字段。
columnDefinition - 可选，表示该字段在数据库中的实际类型。通常ORM 框架可以根     据属性类型自动判断数据库中字段的类型，但是对于Date 类型仍无法确定数据库中字段类型究竟是 DATE,TIME 还是 TIMESTAMP. 此外 ,String 的默认映射类型为 VARCHAR, 如果要将 String 类型映射到特定数据库的 BLOB或 TEXT 字段类型，该属性非常有用。

@Transient   定义暂态属性可选，表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性，如果一个属性并非数据库表的字段映射，就务必将其标示为@Transient，否则ORM 框架默认其注解为 @Basic

@Basic - 用于声明属性的存取策略：
@Basic(fetch=FetchType.EAGER)   即时获取（默认的存取策略）
@Basic(fetch=FetchType.LAZY)    延迟获取

@Inheriance (strategy=InheritanceType.JOINED)不能和@MappedSuperclass共存；
标记在父类上且父类要有@entity和@Id，让子类生成父类的Id字段。
strategy=TABLE_PER_CLASS :设置为该选项表示每个类使用一个表;
strategy=SINGLE_TABLE :设置为该选项表示所有类及其子类共用一个表;
strategy =JOINED : 设置为该选项表示每个类使用子表保存子类比父类多出的属性
  
@Temporal(TemporalType.TIMESTAMP)定义时间精度，用在date Clandar属性上面;
@MappedSuperclass 用在父类上面，不生成父表（如果有@entity会生成父表）属性在子类表中会生成（如果父类没有这个注解 ；子类继承后不会生成父类的字段）;


@ManyToOne(optional = true, cascade = CascadeType.ALL) private WxUser wxUser;生成wxUser_id列;

@ManyToMany(fetch=FetchType.EAGER)
@JoinTable(name="SysRolePermission",joinColumns={@JoinColumn(name="roleId")},inverseJoinColumns={@JoinColumn(name="permissionId")})
	private List<SysPermission> permissions;
	

@OneToOne、@OneToMany、@ManyToOne、ManyToMany的共有属性：
fetch - 配置加载方式。取值有
Fetch.EAGER -  及时加载，多对一默认是Fetch.EAGER 
Fetch.LAZY - 延迟加载，一对多默认是Fetch.LAZY
cascade - 设置级联方式，取值有：
CascadeType.PERSIST - 保存
CascadeType.REMOVE - 删除
CascadeType.MERGE - 修改
CascadeType.REFRESH - 刷新
CascadeType.ALL - 全部
targetEntity - 配置集合属性类型，如：@OneToMany(targetEntity=Book.class)
 
@JoinColumn - 可选，用于描述一个关联的字段。
@JoinColumn 和 @Column 类似介量描述的不是一个简单字段，而是一个关联字段，例如描述一个@ManyToOne的字段。

***********************************************************************************************************************


src/main/resources中增加logback.xml文件
<pre name="code" class="html">
<configuration>  
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
        <encoder>  
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>GBK</charset> 
        </encoder>  
    </appender>  
    <appender name="baselog"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <File>log/base.log</File>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <fileNamePattern>log/base.log.%d.i%</fileNamePattern>  
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
        		<!-- or whenever the file size reaches 64 MB -->  
        		<maxFileSize>64 MB</maxFileSize>  
      		</timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <encoder>  
            <pattern>  
                %d %p (%file:%line\)- %m%n
            </pattern>  
            <charset>UTF-8</charset> <!-- 此处设置字符集 --> 
        </encoder>  
    </appender>  
    <root level="info">  
        <appender-ref ref="STDOUT" />  
    </root>  
    <logger name="com.example" level="DEBUG">  
        <appender-ref ref="baselog" />  
    </logger>  
</configuration>




仓储
<repositories>  
    <repository>  
        <id>spring-snapshots</id>  
        <url>http://repo.spring.io/libs-snapshot</url>  
    </repository>  
</repositories>  
  
<pluginRepositories>  
    <pluginRepository>  
        <id>spring-snapshots</id>  
        <url>http://repo.spring.io/libs-snapshot</url>  
    </pluginRepository>  
</pluginRepositories>   





连接
########################################################
###datasource
########################################################
spring.datasource.url = jdbc:mysql://localhost:3306/cache_test
spring.datasource.username = root
spring.datasource.password = root
spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.max-active=20
spring.datasource.max-idle=8
spring.datasource.min-idle=8
spring.datasource.initial-size=10

########################################################
### Java Persistence Api
########################################################
# Specify the DBMS
spring.jpa.database = MYSQL
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.DefaultNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop
spring.jpa.properties.hibernate.show_sql=true


# REDIS (RedisProperties)
#redis数据库名称  从0到15,默认为db0   
spring.redis.database=1  
# Redis数据库索引（默认为0）
spring.redis.database=0  
# Redis服务器地址
spring.redis.host=192.168.0.58
# Redis服务器连接端口
spring.redis.port=6379  
# Redis服务器连接密码（默认为空）
spring.redis.password=  
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8  
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1  
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8  
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0  
# 连接超时时间（毫秒）
spring.redis.timeout=0  







########################################################
### Tomcat为Spring Boot的默认容器，下面是几个常用配置：
########################################################

# tomcat最大线程数，默认为200
server.tomcat.max-threads=800
# tomcat的URI编码
server.tomcat.uri-encoding=UTF-8
# 存放Tomcat的日志、Dump等文件的临时文件夹，默认为系统的tmp文件夹（如：C:\Users\Angel\AppData\Local\Temp）
server.tomcat.basedir=D:/springboot-tomcat-tmp
# 打开Tomcat的Access日志，并可以设置日志格式的方法：
#server.tomcat.access-log-enabled=true
#server.tomcat.access-log-pattern=
# accesslog目录，默认在basedir/logs
#server.tomcat.accesslog.directory=
# 日志文件目录
logging.path=H:/springboot-tomcat-tmp
# 日志文件名称，默认为spring.log
logging.file=myapp.log



****************************************************************************************************************************


	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>

hibernate二级缓存配置
# 打开hibernate统计信息
spring.jpa.properties.hibernate.generate_statistics=true

# 打开二级缓存
spring.jpa.properties.hibernate.cache.use_second_level_cache=true

# 打开查询缓存
spring.jpa.properties.hibernate.cache.use_query_cache=true

# 指定缓存provider
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory

# 指定配置文件
spring.cache.ehcache.config=classpath:config/another-config.xml

# 配置shared-cache-mode
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE

ehcache.xml
<?xml version="1.0" encoding="UTF-8"?>
<ehcache name="es">

	<diskStore path="java.io.tmpdir" />

	<!-- name:缓存名称。 maxElementsInMemory:缓存最大数目 maxElementsOnDisk：硬盘最大缓存个数。 eternal:对象是否永久有效，一但设置了，timeout将不起作用。 
		overflowToDisk:是否保存到磁盘，当系统当机时 timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。 
		timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。 
		diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts 
		of the Virtual Machine. The default value is false. diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 
		diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。 memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。 
		clearOnFlush：内存数量最大时是否清除。 memoryStoreEvictionPolicy: Ehcache的三种清空策略; FIFO，first 
		in first out，这个是大家最熟的，先进先出。 LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。 
		LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。 -->
	<defaultCache maxElementsInMemory="10000" eternal="false"
		timeToIdleSeconds="120" timeToLiveSeconds="120" overflowToDisk="false"
		diskPersistent="false" diskExpiryThreadIntervalSeconds="120" />
	<!-- 登录记录缓存锁定10分钟 -->
	<cache name="passwordRetryCache" maxEntriesLocalHeap="2000"
		eternal="false" timeToIdleSeconds="3600" timeToLiveSeconds="0"
		overflowToDisk="false" statistics="true">
		<!--<cacheEventListenerFactory class="CacheEventListener的实现类(可选项)"/>-->
	</cache>
</ehcache>


	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-cache</artifactId>
	</dependency>
	<dependency> 
		<groupId>org.springframework.boot</groupId> 
		<artifactId>spring-boot-starter-redis</artifactId> 
	</dependency> 



集成ehcache
spring.cache.ehcache.config=classpath:config/another-config.xml
在实体类上用
@CacheConfig
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = "entityCache")
方法上用 @Cacheable 查询专用
在配置类上用 @EnableCaching
下面两个bean可以省略
@Bean
	public CacheManager ehCacheCacheManager(EhCacheManagerFactoryBean bean){
		return new EhCacheCacheManager (bean.getObject ());
	}

	/*
	 * 据shared与否的设置,Spring分别通过CacheManager.create()或new CacheManager()方式来创建一个ehcache基地.
	 */
	@Bean
	public EhCacheManagerFactoryBean ehCacheManagerFactoryBean(){
		EhCacheManagerFactoryBean cacheManagerFactoryBean = new EhCacheManagerFactoryBean ();
		cacheManagerFactoryBean.setConfigLocation (new ClassPathResource ("conf/ehcache-app.xml"));
		cacheManagerFactoryBean.setShared (true);
		return cacheManagerFactoryBean;
	}


集成redis缓存
实体类实现序列化接口
在实体类上用
@CacheConfig
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = "entityCache")
方法上用 @Cacheable 查询专用
在配置类上用 @EnableCaching
下面两个bean可以省略
	@Bean
    public CacheManager cacheManager(RedisTemplate<?,?> redisTemplate) {
       CacheManager cacheManager = new RedisCacheManager(redisTemplate);
       return cacheManager;
    }
	@Bean
	//RedisConnectionFactory Spring底层指定了无需配置
	   public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {
	      RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();
	      redisTemplate.setConnectionFactory(factory);
	      
	      //key序列化方式;（不然会出现乱码;）,但是如果方法上有Long等非String类型的话，会报类型转换错误；
	      //所以在没有自己定义key生成策略的时候，以下这个代码建议不要这么写，可以不配置或者自己实现ObjectRedisSerializer
	      //或者JdkSerializationRedisSerializer序列化方式;
//	    RedisSerializer<String> redisSerializer = new StringRedisSerializer();//Long类型不可以会出现异常信息;
//	    redisTemplate.setKeySerializer(redisSerializer);
//	    redisTemplate.setHashKeySerializer(redisSerializer);
	      
	    return redisTemplate;
	    }

	同时集成2中缓存，优先使用redis，如果指定了cacheManager使用指定的cache
	
	
***************************************************************************************************************************


使用properties文件属性的几种方式：application.properties  application-prod.properties  application-dev.properties

1. @Value("${com.didispace.blog.name}")缺点不能同时读开发和生产模式下的属性

2. @EnableConfigurationProperties(可省略)
@ConfigurationProperties(prefix="com.didispace.blog",locations={"classpath:application-dev.properties","classpath:application-prod.properties"}) 能同时读开发和生产模式下的属性

spring.profiles.active=dev，就是说默认以dev环境设置

# 随机字符串
com.didispace.blog.value=${random.value}
# 随机int
com.didispace.blog.number=${random.int}
# 随机long
com.didispace.blog.bignumber=${random.long}
# 10随机
com.didispace.blog.test1=${random.int(10)}
# 10-20随机
com.didispace.blog.test2=${random.int[10,20]}


***************************************************************************************************************************

**
 * AOP实现Web层的日志切面
 * @version v.0.1
 */
引入AOP依赖 @EnableAspectJAutoProxy(可忽略)
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
</dependency>

@Aspect
@Component
@Order(-1)
public class WebLogAspect {
    private Logger logger =  LoggerFactory.getLogger(this.getClass());
   
    ThreadLocal<Long> startTime = new ThreadLocal<Long>();
   
    /**
     * 定义一个切入点.
     * 解释下：
     *
     * ~ 第一个 * 代表任意修饰符及任意返回值.
     * ~ 第二个 * 任意包名
     * ~ 第三个 * 代表任意方法.
     * ~ 第四个 * 定义在web包或者子包
     * ~ 第五个 * 任意方法
     * ~ .. 匹配任意数量的参数.
     */
     @Pointcut("execution(public * com.kfit.*.web..*.*(..))")
     publicvoid webLog(){}
	 
	 
	 
    多彩输出
如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。通过在application.properties中设置spring.output.ansi.enabled参数来支持。

NEVER：禁用ANSI-colored输出（默认项）
DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用


    文件输出
Spring Boot默认配置只会输出到控制台，并不会记录到文件中，但是我们通常生产环境使用时都需要以文件方式记录。
若要增加文件输出，需要在application.properties中配置logging.file或logging.path属性。

logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log
* 日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO *



    级别控制
在Spring Boot中只需要在application.properties中进行配置完成日志记录的级别控制。
配置格式：logging.level.*=LEVEL
logging.level：日志级别控制前缀，*为包名或Logger名
LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
举例：
logging.level.com.didispace=DEBUG：com.didispace包下所有class以DEBUG级别输出
logging.level.root=WARN：root日志以WARN级别输出



***************************************************************************************************************************

applicationcontextaware  

org.springframework.context.ApplicationContextAware 
它的setApplicationContext 方法将在Spring启动之前第一个被调用。


@Component
public class SpringUtil implements ApplicationContextAware {

    private static ApplicationContext context;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        context = applicationContext;
    }

    public static ApplicationContext getContext() {
        return context;
    }

    public static <T> T getBean(Class<T> requiredType) {
        return context.getBean(requiredType);
    }

    public static Object getBean(String name) {
        return context.getBean(name);
    }
}

******************************************************************************************************************

@EnableAsync 		@Async
@EnableScheduling   @Scheduled
	
	
	
***********************************************************************************************************************

     国际化


messages.properties （默认，当找不到语言的配置的时候，使用该文件进行展示）。

messages_zh_CN.properties

messages_en_US.properties

具体的代码如下：

messages.properties：

welcome = 欢迎你登录到 阿里巴巴 网站（default）

messages_zh_CN.properties：

welcome = \u6b22\u8fce\u4f60\u767b\u5f55\u5230 \u963f\u91cc\u5df4\u5df4 \u7f51\u7ad9\uff08\u4e2d\u6587\uff09
对应的信息是：

welcome = 欢迎你登录到 阿里巴巴 网站（中文）

messages_en_US.properties：

welcome = welcome to login to alibaba website(English)
配置信息就这么简单，在前端修改.html文件，使用#{key}的方式进行使用messages中的字段信息：

（默认）.properties命名是messages开头
########################################################
### i18n setting.
########################################################

#指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始messages
spring.messages.basename=i18n/messages
#设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1
spring.messages.cache-seconds= 3600
#设定Message bundles的编码，默认: UTF-8
#spring.messages.encoding=UTF-8


Spring采用的默认区域解析器是AcceptHeaderLocaleResolver。它通过检验HTTP请求的accept-language头部来解析区域。
这个头部是由用户的web浏览器根据底层操作系统的区域设置进行设定。



@Bean
public LocaleResolver localeResolver() {
	SessionLocaleResolver slr = new SessionLocaleResolver();
	//设置默认区域,
	slr.setDefaultLocale(Locale.CHINA);
	return slr;
}
@Bean
public LocaleResolver localeResolver() {
   CookieLocaleResolver slr = new CookieLocaleResolver();
	//设置默认区域,
	slr.setDefaultLocale(Locale.CHINA);
	slr.setCookieMaxAge(3600);//设置cookie有效期.
	returnslr;
}

<form action="/changeLanauage" method="get">
       <input name="lang" type="hidden" value="zh"  />
       <button>#{}</button>
    </form>
   
    <form action="/changeLanauage" method="get">
       <input name="lang" type="hidden" value="en" />
       <button>#{}</button> </form>

@RequestMapping("/changeLanauage")
public String changeLanauage(HttpServletRequest request,HttpServletResponse response,String lang){
   LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request);
   if("zh".equals(lang)){
	   localeResolver.setLocale(request, response, new Locale("zh", "CN"));
   }elseif("en".equals(lang)){
	   localeResolver.setLocale(request, response, new Locale("en", "US"));
   }
   return "redirect:/hello";
   }
   
   
   
            使用参数修改用户的区域；
   
除了显式调用LocaleResolver.setLocale()来修改用户的区域之外，还可以将LocaleChangeInterceptor拦截器应用到处理程序映射中，它会发现当前HTTP请求中出现的特殊参数。其中的参数名称可以通过拦截器的paramName属性进行自定义。如果这种参数出现在当前请求中，拦截器就会根据参数值来改变用户的区域。

   只需要在App.java中加入：

@Bean
 public LocaleChangeInterceptor localeChangeInterceptor() {
		LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
		// 设置请求地址的参数,默认为：locale
//          lci.setParamName(LocaleChangeInterceptor.DEFAULT_PARAM_NAME);
		return lci;
}

@Override
public void addInterceptors(InterceptorRegistry registry) {
   registry.addInterceptor(localeChangeInterceptor());
}
注意这个是可以和会话区域解析器以及Cookie区域解析器一起使用的，但是不能和FixedLocaleResolver一起使用，否则会抛出异常信息。


*****************************************************************************************************************************

  校验器  ValidationMessages_en.properties

约束注解名称      约束注解说明
@null           验证对象是否为空
@notnull     验证对象是否为非空
@asserttrue       验证 boolean 对象是否为 true
@assertfalse      验证 boolean 对象是否为 false
@min           验证 number 和 string 对象是否大等于指定的值
@max           验证 number 和 string 对象是否小等于指定的值
@decimalmin    验证 number 和 string 对象是否大等于指定的值，小数存在精度
@decimalmax    验证 number 和 string 对象是否小等于指定的值，小数存在精度
@size           验证对象（array,collection,map,string）长度是否在给定的范围之内
@digits       验证 number 和 string 的构成是否合法
@past           验证 date 和 calendar 对象是否在当前时间之前
@future       验证 date 和 calendar 对象是否在当前时间之后
@pattern     验证 string 对象是否符合正则表达式的规则

@Email     验证邮箱


实际例子：

@size (min=3, max=20, message="用户名长度只能在3-20之间")

@size (min=6, max=20, message="密码长度只能在6-20之间")

@pattern (regexp="[a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\.[a-za-z]{2,4}", message="邮件格式错误")

@Length(min = 5, max = 20, message = "用户名长度必须位于5到20之间")  

@Email(message = "比如输入正确的邮箱")  

@NotNull(message = "用户名称不能为空") 
@Max(value = 100, message = "年龄不能大于100岁") 
@Min(value= 18 ,message= "必须年满18岁！" )  
 @AssertTrue(message = "bln4 must is true")
 

 @AssertFalse(message = "blnf must is falase")
@DecimalMax(value="100",message="decim最大值是100")
DecimalMin(value="100",message="decim最小值是100")
@NotNull(message = "身份证不能为空") 
@Pattern(regexp="^(\\d{18,18}|\\d{15,15}|(\\d{17,17}[x|X]))$", message="身份证格式错误")


***********************************************************************************************************************

以下为校验+国际化输出

thymeleaf和freemarker是可以共存的。

########################################################
###THYMELEAF (ThymeleafAutoConfiguration)
########################################################
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#charset=<encoding> is added
#spring.thymeleaf.content-type=text/html
# set to false for hot refresh
spring.thymeleaf.cache=false


########################################################
###FREEMARKER (FreeMarkerAutoConfiguration)
########################################################
spring.freemarker.allow-request-override=false
spring.freemarker.cache=true
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=false
spring.freemarker.expose-session-attributes=false
spring.freemarker.expose-spring-macro-helpers=false
#spring.freemarker.prefix=
#spring.freemarker.request-context-attribute=
#spring.freemarker.settings.*=
#spring.freemarker.suffix=.ftl
#spring.freemarker.template-loader-path=classpath:/templates/#comma-separatedlist
#spring.freemarker.view-names= #whitelistofviewnamesthatcanberesolved

以下为校验+国际化输出
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3">
<body>
<form action="/demoAdd" method="post" th:object="${demo}">
   <p>姓名：<input type="text" name="name" th:value="*{name}" />
   </p>
   <p th:if="${#fields.hasErrors('name')}" th:errors="*{name}"></p>
   <p>密码：<input type="text" name="password" th:value="*{password}"  />
   </p>
   <p th:if="${#fields.hasErrors('password')}" th:errors="*{password}"></p>
   <p><button>提交</button></p>
</form>

<form action="/changeLanauage" method="get">
	<input name="lang" type="hidden" value="zh" />
	<button><p th:text="#{lang_zh}"></p></button>
</form>

<form action="/changeLanauage" method="get">
	<input name="lang" type="hidden" value="en" />
	<button><p th:text="#{lang_en}"></p></button>
</form>
</body>
</html>

*************************************************************************************************************************

	邮件发送
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-mail</artifactId>
	</dependency>
	
	@Autowired
	JavaMailSender jms;
	SimpleMailMessage message = new SimpleMailMessage();一般文字邮件 jms.send(message/mimeMessage)
	MimeMessage mimeMessage =  jms.createMimeMessage();
	MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);附件邮件
	
	helper.addAttachment("头像1.jpg", file1); 添加附件
	
	helper.setText("<body>这是图片：<img src='cid:head' /></body>", true);添加html
	helper.addInline("head", file1);静态资源绑定到html
	
	Map<String, Object> model = new HashMap<>();
	model.put("username", "XXX");
	Configuration cfg = new Configuration(Configuration.VERSION_2_3_23);  
	// 设定去哪里读取相应的ftl模板  
	cfg.setClassForTemplateLoading(this.getClass(), "/templates");  
	// 在模板文件目录中寻找名称为name的模板文件  
	Template template   = cfg.getTemplate("email.ftl");
	String html = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);
	helper.setText(html, true);
	
	
########################################################
###mail setting
########################################################
# 设置邮箱主机
spring.mail.host=smtp.qq.com
# 设置用户名
spring.mail.username=用户名
# 设置密码
spring.mail.password=邮箱设置里面生成的授权码
# 设置是否需要认证，如果为true,那么用户名和密码就必须的，
#如果设置false，可以不设置用户名和密码，当然也得看你的对接的平台是否支持无密码进行访问的。
spring.mail.properties.mail.smtp.auth=true
# STARTTLS[1]  是对纯文本通信协议的扩展。它提供一种方式将纯文本连接升级为加密连接（TLS或SSL），而不是另外使用一个端口作加密通信。
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

***************************************************************************************************************************



web.upload-path=D:/temp

spring.mvc.static-path-pattern=/**
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,\
classpath:/static/,classpath:/public/,file:${web.upload-path}